/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv from "ajv";
import ProjectSchema from "./project.schema";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export { ProjectSchema };
export const ProjectSchemaSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  defaultProperties: [],
  definitions: {
    Chart: {
      defaultProperties: [],
      properties: {
        dropdownLabel: {
          type: "string",
        },
        labelsAndValues: {
          items: {
            $ref: "#/definitions/LabelsAndValues",
          },
          type: "array",
        },
        popoverUnit: {
          type: "string",
        },
        valueUnit: {
          type: "string",
        },
      },
      required: ["labelsAndValues", "popoverUnit", "valueUnit"],
      type: "object",
    },
    ChartsSectionElement: {
      defaultProperties: [],
      properties: {
        charts: {
          items: {
            $ref: "#/definitions/Chart",
          },
          type: "array",
        },
        description: {
          type: "string",
        },
        title: {
          type: "string",
        },
        type: {
          type: "string",
        },
      },
      required: ["charts", "description", "title", "type"],
      type: "object",
    },
    Erc20Schema: {
      defaultProperties: [],
      properties: {
        nonCirculatingWallets: {
          items: {
            type: "string",
          },
          type: "array",
        },
        tokenAddress: {
          type: "string",
        },
      },
      required: ["nonCirculatingWallets", "tokenAddress"],
      type: "object",
    },
    FavoriteTweetSchema: {
      defaultProperties: [],
      properties: {
        tweetUrl: {
          type: "string",
        },
      },
      required: ["tweetUrl"],
      type: "object",
    },
    LabelsAndValues: {
      defaultProperties: [],
      properties: {
        label: {
          type: "string",
        },
        popoverValue: {
          type: "number",
        },
        value: {
          type: "number",
        },
      },
      required: ["label", "popoverValue", "value"],
      type: "object",
    },
    LaunchTokenInfoElement: {
      defaultProperties: [],
      properties: {
        label: {
          type: "string",
        },
        type: {
          type: "string",
        },
        value: {
          type: "number",
        },
      },
      required: ["label", "type", "value"],
      type: "object",
    },
    LinkSchema: {
      defaultProperties: [],
      properties: {
        label: {
          type: "string",
        },
        url: {
          format: "url",
          type: "string",
        },
      },
      required: ["label", "url"],
      type: "object",
    },
    RoadmapSchema: {
      defaultProperties: [],
      properties: {
        day: {
          type: "number",
        },
        description: {
          type: "string",
        },
        image: {
          type: "string",
        },
        link: {
          type: "string",
        },
        month: {
          type: "number",
        },
        quarter: {
          type: "string",
        },
        title: {
          type: "string",
        },
        year: {
          type: "number",
        },
      },
      required: ["description", "title", "year"],
      type: "object",
    },
    Section: {
      defaultProperties: [],
      properties: {
        charts: {
          items: {
            $ref: "#/definitions/Chart",
          },
          type: "array",
        },
        content: {
          type: "string",
        },
        type: {
          type: "string",
        },
      },
      required: ["type"],
      type: "object",
    },
    SocialSchema: {
      defaultProperties: [],
      properties: {
        handle: {
          type: "string",
        },
        name: {
          enum: [
            "Facebook",
            "Medium",
            "Reddit",
            "Telegram",
            "Telegram Announcements",
            "Twitter",
            "Youtube",
          ],
          type: "string",
        },
        search_strings: {
          items: {
            type: "string",
          },
          type: "array",
        },
        url: {
          format: "url",
          type: "string",
        },
      },
      required: ["name", "url"],
      type: "object",
    },
    TokenSchema: {
      defaultProperties: [],
      properties: {
        sections: {
          items: {
            $ref: "#/definitions/Section",
          },
          type: "array",
        },
      },
      required: ["sections"],
      type: "object",
    },
    TokenomicsSchema: {
      defaultProperties: [],
      properties: {
        circulating_supply: {
          type: "number",
        },
        isInflationary: {
          type: "boolean",
        },
        max_supply: {
          type: "number",
        },
        total_supply: {
          type: "number",
        },
      },
      type: "object",
    },
    TradingPair: {
      defaultProperties: [],
      properties: {
        base: {
          type: "string",
        },
        exchange_id: {
          type: "string",
        },
        pair_id: {
          type: "string",
        },
        quote: {
          type: "string",
        },
      },
      required: ["base", "exchange_id", "pair_id", "quote"],
      type: "object",
    },
    VideosSectionElement: {
      defaultProperties: [],
      properties: {
        description: {
          type: "string",
        },
        title: {
          type: "string",
        },
        video: {
          type: "string",
        },
      },
      required: ["description", "title", "video"],
      type: "object",
    },
  },
  properties: {
    additionalLinks: {
      items: {
        $ref: "#/definitions/LinkSchema",
      },
      type: "array",
    },
    additionalSymbols: {
      items: {
        type: "string",
      },
      type: "array",
    },
    chartsSection: {
      items: {
        $ref: "#/definitions/ChartsSectionElement",
      },
      type: "array",
    },
    coingecko_id: {
      type: "string",
    },
    erc20: {
      $ref: "#/definitions/Erc20Schema",
    },
    favoriteTweets: {
      items: {
        $ref: "#/definitions/FavoriteTweetSchema",
      },
      type: "array",
    },
    isStableCoin: {
      type: "boolean",
    },
    isUpcomingProject: {
      type: "boolean",
    },
    launchTokenInfos: {
      items: {
        $ref: "#/definitions/LaunchTokenInfoElement",
      },
      type: "array",
    },
    name: {
      type: "string",
    },
    roadmap: {
      description: "Roadmap is a premium feature",
      items: {
        $ref: "#/definitions/RoadmapSchema",
      },
      type: "array",
    },
    socialShareInfos: {
      items: {
        type: "string",
      },
      type: "array",
    },
    socials: {
      items: {
        $ref: "#/definitions/SocialSchema",
      },
      minItems: 1,
      type: "array",
    },
    source_code: {
      format: "url",
      type: "string",
    },
    symbol: {
      type: "string",
    },
    token: {
      $ref: "#/definitions/TokenSchema",
    },
    tokenomics: {
      $ref: "#/definitions/TokenomicsSchema",
    },
    tokenomics_url: {
      type: "string",
    },
    trading_pairs: {
      items: {
        $ref: "#/definitions/TradingPair",
      },
      type: "array",
    },
    videosSection: {
      items: {
        $ref: "#/definitions/VideosSectionElement",
      },
      type: "array",
    },
    website: {
      format: "url",
      type: "string",
    },
    white_paper: {
      format: "url",
      type: "string",
    },
  },
  required: ["name", "socials", "symbol", "tokenomics", "website"],
  type: "object",
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">;
export const isProjectSchema = ajv.compile(
  ProjectSchemaSchema
) as ValidateFunction<ProjectSchema>;
export default function validate(value: unknown): ProjectSchema {
  if (isProjectSchema(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isProjectSchema.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "ProjectSchema" }
      ) +
        "\n\n" +
        inspect(value)
    );
  }
}
